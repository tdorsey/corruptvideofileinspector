[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["."]
exclude = [
    "/.eggs",
    "/.git",
    "/.idea",
    "/test-videos",
    "/.DS_Store",
    "/Dockerfile",
    "/docker-compose.yml",
    "/__pycache__",
    "/*.pyc",
]

[project]
name = "corrupt-video-inspector"
version = "1.0.0"
description = "A Docker-based tool to detect and report corrupt video files using FFmpeg"
readme = "README.md"
license = "MIT"
requires-python = ">=3.8"
authors = [
    {name = "tdorsey", email = ""},
]
keywords = ["video", "ffmpeg", "corruption", "inspection", "cli"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Environment :: Console",
    "Intended Audience :: Developers",
    "Intended Audience :: System Administrators",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Multimedia :: Video",
    "Topic :: System :: Systems Administration",
    "Topic :: Utilities",
]

dependencies = [
    "typer>=0.16.0",
    "click>=8.0.0",
    "PyYAML>=6.0",
    "requests>=2.28.0",
    "piny">=1.1.0"
]

[project.optional-dependencies]
dev = [
    "black>=23.0.0",
    "ruff>=0.1.0",
    "mypy>=1.0.0",
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pre-commit>=3.0.0",
    "types-requests>=2.28.0",
    "types-PyYAML>=6.0.0"
]

[project.scripts]
corrupt-video-inspector = "cli_handler:main"

[project.urls]
Homepage = "https://github.com/tdorsey/corruptvideofileinspector"
Repository = "https://github.com/tdorsey/corruptvideofileinspector"
Issues = "https://github.com/tdorsey/corruptvideofileinspector/issues"

# Black configuration
[tool.black]
line-length = 100
target-version = ['py38', 'py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

# Ruff configuration
[tool.ruff]
line-length = 100
target-version = "py38"

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "ARG", # flake8-unused-arguments
    "COM", # flake8-commas
    "ICN", # flake8-import-conventions
    "PIE", # flake8-pie
    "PL",  # pylint
    "PT",  # flake8-pytest-style
    "PTH", # flake8-use-pathlib
    "RET", # flake8-return
    "RUF", # Ruff-specific rules
    "SIM", # flake8-simplify
    "T20", # flake8-print
    "TCH", # flake8-type-checking
    "TID", # flake8-tidy-imports
    "TRY", # tryceratops
]
ignore = [
    "E501",    # line too long, handled by black
    "PLR0913", # too many arguments
    "PLR0912", # too many branches
    "PLR0915", # too many statements
    "PLR2004", # magic value used in comparison
    "PLW0603", # global statement (acceptable for signal handling)
    "T201",    # print found (we want print statements in CLI)
    "TRY003",  # avoid long messages in exception strings
    "COM812",  # trailing comma missing (handled by formatter)
    "ISC001",  # single line implicit string concatenation (conflicts with formatter)
    "TRY300",  # suppress tryceratops warnings for return in try
]

 [tool.ruff.lint.per-file-ignores]
"test_*.py" = ["ARG", "PLR2004"]
"tests/*.py" = [
    "PLC0415", # imports should be top-level (tests often import in funcs)
    "PTH118",  # os.path.join -> pathlib
    "PTH120",  # os.path.dirname -> pathlib
    "PTH123",  # open() -> Path.open()
    "PTH100",  # os.path.abspath -> Path.resolve()
    "PTH110",  # os.path.exists -> Path.exists()
    "PTH119",  # os.path.basename -> Path.name
]

[tool.ruff.lint.isort]
known-first-party = ["cli_handler", "video_inspector", "utils"]

# MyPy configuration
[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[tool.mypy-type-checker]
severity = "Warning"

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

# Coverage configuration
[tool.coverage.run]
source = ["cli_handler", "video_inspector", "utils"]
omit = [
    "tests/*",
    "*/__pycache__/*",
    "*/.*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
