# Sample Configuration with Probe Features

# This configuration demonstrates the probe-before-scan workflow
# Copy this to config.yaml and adjust paths as needed

logging:
  level: INFO
  file: /tmp/inspector.log
  date_format: "%Y-%m-%dT%H:%M:%S%z"
  format: "%(asctime)s %(levelname)s %(name)s %(message)s"

ffmpeg:
  command: /usr/bin/ffmpeg
  quick_timeout: 30
  deep_timeout: 1800
  
  # === NEW PROBE FEATURES ===
  # Timeout for FFprobe operations (seconds)
  probe_timeout: 15
  
  # Enable persistent caching of probe results
  enable_probe_cache: true
  
  # Maximum age for cached probe results (hours)
  probe_cache_max_age_hours: 24.0
  
  # Require FFprobe validation before corruption scanning
  # When true: Only files with successful probe results and video streams are scanned
  # When false: All files are scanned (legacy behavior)
  require_probe_before_scan: true

processing:
  max_workers: 8
  default_mode: "quick"

output:
  default_json: true
  default_output_dir: /tmp/output
  default_filename: "scan_results.json"

scan:
  recursive: true
  max_workers: 8
  mode: "hybrid"
  default_input_dir: /tmp/videos
  extensions: [".mp4", ".mkv", ".avi", ".mov", ".wmv", ".flv", ".m4v", ".3gp"]

trakt:
  client_id: ""
  client_secret: ""
  include_statuses: ["healthy"]

# ===============================================
# PROBE WORKFLOW EXPLANATION
# ===============================================

# Phase 1: File Discovery
# - Scanner finds all video files in target directories
# - Files are filtered by extension (see scan.extensions above)

# Phase 2: Probe Analysis (when require_probe_before_scan: true)
# - Each file is analyzed with FFprobe to extract metadata
# - Results include: streams, format info, duration, codec details
# - Probe results are cached to avoid redundant operations
# - Cache file location: {output.default_output_dir}/probe_cache.json

# Phase 3: Eligibility Check
# Files are eligible for corruption scanning if:
# - FFprobe analysis was successful
# - At least one video stream was detected
# - Format information is available

# Phase 4: Corruption Scanning
# - Only eligible files undergo FFmpeg corruption analysis
# - Probe results are included in scan results for enhanced reporting
# - Ineligible files are logged but not scanned

# ===============================================
# PERFORMANCE NOTES
# ===============================================

# Cache Benefits:
# - Probe results are cached for 24 hours by default
# - Subsequent scans of the same files use cached results
# - Typical probe operation: 1-5 seconds per file
# - Cache hit rate: 70-90% for regular scanning workflows

# Resource Usage:
# - FFprobe is much lighter than FFmpeg corruption scanning
# - Early rejection of non-video files saves significant time
# - Audio-only files, images, and corrupted files are skipped

# ===============================================
# TROUBLESHOOTING
# ===============================================

# If probe workflow causes issues:
# 1. Set require_probe_before_scan: false to disable
# 2. Check FFprobe availability: ffprobe -version
# 3. Clear cache: rm /tmp/output/probe_cache.json
# 4. Test individual file: corrupt-video-inspector test-ffprobe /path/to/video.mp4

# Common probe failures:
# - "FFprobe command not available" -> Install FFmpeg package
# - "Probe timed out" -> Increase probe_timeout value
# - "No video streams detected" -> File is audio-only or corrupted
# - "Invalid data found" -> File is corrupted or not a media file