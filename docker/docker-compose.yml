services:
  # Production service (default profile)
  video:
    build:
      context: .
      target: production
    container_name: video
    volumes:
      - video_data:/app/videos:ro
      - output:/app/output
      # Mount configuration file if it exists
      - ./config.yaml:/app/config.yaml:ro
    environment:
      - TRAKT_CLIENT_ID=test_client_id
      - PYTHONUNBUFFERED=1
      # Configuration can also be set via environment variables
      # These will override config file settings
      # - CVI_LOG_LEVEL=INFO
      # - CVI_MAX_WORKERS=6
      # - CVI_DEFAULT_MODE=hybrid
    secrets:
      # Docker secrets for sensitive configuration
      - cvi_log_level
      - cvi_ffmpeg_command
    # Command can be overridden at runtime, but Dockerfile provides sensible default

  # Development service (dev profile)
  dev:
    build:
      context: .
      target: development
    container_name: video-dev
    profiles:
      - dev
    volumes:
      # Bind mount source code for development
      - .:/app
      # Persistent volumes for videos and output
      - dev_videos:/app/videos
      - dev_output:/app/output
    environment:
      - PYTHONUNBUFFERED=1
      - PYTHONDONTWRITEBYTECODE=1
      # Development environment variables can override config
      # - CVI_LOG_LEVEL=DEBUG
    working_dir: /app
    command: [ "tail", "-f", "/dev/null" ] # Keep container running for development
    stdin_open: true
    tty: true

# Docker secrets configuration
secrets:
  cvi_log_level:
    file: ./secrets/cvi_log_level.txt
  cvi_ffmpeg_command:
    file: ./secrets/cvi_ffmpeg_command.txt

volumes:
  # Production volumes
  video_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /mnt/srv/media/movies
  output:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /home/ubuntu/video/output

  # Development volumes
  dev_videos:
    driver: local
  dev_output:
    driver: local
