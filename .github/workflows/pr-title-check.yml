name: PR Title Check

on:
  pull_request:
    types: [opened, edited, synchronize]

permissions:
  contents: read
  pull-requests: write
  issues: read

jobs:
  validate-pr-title:
    name: Validate PR Title and Requirements
    runs-on: ubuntu-latest

    steps:
      - name: Validate PR title format
        id: semantic-pr
        uses: amannn/action-semantic-pull-request@v5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          # Define the allowed conventional commit types based on the
          # project's issue templates
          types: |
            feat
            fix
            docs
            style
            refactor
            perf
            test
            chore
          # Allow scopes (optional part after type)
          requireScope: false
          # Disallow release-related types since this is handled by
          # automated releases
          disallowScopes: |
            release
          # Validate that the subject starts with lowercase
          subjectPattern: ^(?![A-Z]).+$
          subjectPatternError: |
            The subject "{subject}" found in the pull request title "{title}"
            didn't match the configured pattern. Please ensure that the subject
            starts with a lowercase letter.
          # Ignore merge commits and dependabot PRs
          ignoreLabels: |
            bot
            ignore-semantic-pr
          # Validate PR body contains issue reference
          validateSingleCommit: false

      - name: Validate issue reference and handle failures
        if: always()
        uses: actions/github-script@v7
        with:

          script: |
            const title = context.payload.pull_request.title;
            const body = context.payload.pull_request.body || '';
            const prNumber = context.payload.pull_request.number;
            const isDraft = context.payload.pull_request.draft;
            const assignees = context.payload.pull_request.assignees;
            const branchName = context.payload.pull_request.head.ref || '';



            // Check for issue reference in title, body, or branch name
            const issueRefPattern = /#(\d+)/;
            const branchIssuePattern = /(?:issue-|fix-|feature-|bug-|hotfix-)(\d+)/i;
            let foundIssueNumber = null;

            // Try to extract issue number from title
            let match = title.match(issueRefPattern);
            if (match) {
              foundIssueNumber = match[1];
            }
            // Try to extract from body if not found
            if (!foundIssueNumber) {
              match = body.match(issueRefPattern);
              if (match) {
                foundIssueNumber = match[1];
              }
            }
            // Try to extract from branch name if not found
            if (!foundIssueNumber) {
              match = branchName.match(issueRefPattern);
              if (match) {
                foundIssueNumber = match[1];
              } else {
                match = branchName.match(branchIssuePattern);
                if (match) {
                  foundIssueNumber = match[1];
                }
              }
            }

            const hasIssueReference = Boolean(foundIssueNumber);

            // Validate that the referenced issue exists
            let issueExists = false;
            if (foundIssueNumber) {
              try {
                const issue = await github.rest.issues.get({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: parseInt(foundIssueNumber, 10)
                });
                if (issue && issue.status === 200) {
                  issueExists = true;
                }
              } catch (error) {
                issueExists = false;
              }
            }

            // Check if semantic PR validation failed
            const semanticPrFailed = '${{ steps.semantic-pr.outcome }}' === 'failure';

            let validationErrors = [];

            // Collect validation errors
            if (semanticPrFailed) {
              validationErrors.push('‚ùå **PR title format validation failed**');
              validationErrors.push('   The PR title must follow conventional commit format: `type: description`');
              validationErrors.push('   Allowed types: `feat`, `fix`, `docs`, `style`, `refactor`, `perf`, `test`, `chore`');
              validationErrors.push('   Example: `feat: add new video validation feature`');
            }

            if (!hasIssueReference) {
              validationErrors.push('‚ùå **Missing issue reference**');
              validationErrors.push('   PR must reference an issue number (e.g., #123) in the title, body, or branch name');
              validationErrors.push('   Example: `feat: add new feature (#123)` or add "Fixes #123" to PR body, or use a branch name like `issue-123-description`');
            } else if (!issueExists) {
              validationErrors.push('‚ùå **Referenced issue does not exist**');
              validationErrors.push(`   Issue #${foundIssueNumber} was not found in this repository. Please reference a valid, existing issue.`);
            }

            // Check if semantic PR validation failed
            const semanticPrFailed = '${{ steps.semantic-pr.outcome }}' === 'failure';

            let validationErrors = [];

            // Collect validation errors
            if (semanticPrFailed) {
              validationErrors.push('‚ùå **PR title format validation failed**');
              validationErrors.push('   The PR title must follow conventional commit format: `type: description`');
              validationErrors.push('   Allowed types: `feat`, `fix`, `docs`, `style`, `refactor`, `perf`, `test`, `chore`');
              validationErrors.push('   Example: `feat: add new video validation feature`');
            }

            if (!hasIssueReference) {
              validationErrors.push('‚ùå **Missing issue reference**');
              validationErrors.push('   PR must reference an issue number (e.g., #123) in the title, body, or branch name');
              validationErrors.push('   Example: `feat: add new feature (#123)` or add "Fixes #123" to PR body, or use a branch name like `issue-123-description`');
            }

            // If there are validation errors, handle the failure
            if (validationErrors.length > 0) {
              // Convert PR to draft if it's not already
              if (!isDraft) {
                try {
                  await github.rest.pulls.update({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    pull_number: prNumber,
                    draft: true
                  });
                  console.log('‚úÖ Converted PR to draft due to validation failures');
                } catch (error) {
                  console.error('‚ùå Failed to convert PR to draft:', error.message);
                }
              }

              // Create comment with validation errors
              const errorList = validationErrors.join('\n');
              const commentBody = `## üö´ PR Validation Failed

            This pull request has been automatically converted to **draft** due to validation failures.

            ### Issues Found:
            ${errorList}

            ### How to Fix:
            1. **Fix the PR title format** if needed:
               - Use conventional commit format: \`type: description\`
               - Ensure description starts with lowercase letter
               - Allowed types: \`feat\`, \`fix\`, \`docs\`, \`style\`, \`refactor\`, \`perf\`, \`test\`, \`chore\`

            2. **Add issue reference** if missing:
               - Include issue number in title: \`feat: add feature (#123)\`
               - Or add to PR body: \`Fixes #123\` or \`Closes #123\`

            3. **Mark as ready for review** once all issues are resolved

            ---
            *This check is automated. Once you fix the issues above, the validation will run again when you update the PR.*`;

              try {
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: prNumber,
                  body: commentBody
                });
                console.log('‚úÖ Posted validation failure comment');
              } catch (error) {
                console.error('‚ùå Failed to post comment:', error.message);
              }

              // Notify assignees if any
              if (assignees && assignees.length > 0) {
                const assigneeNotifications = assignees.map(assignee => `@${assignee.login}`).join(' ');
                const notificationComment = `${assigneeNotifications} - This PR requires your attention due to validation failures. Please review the comment above.`;

                try {
                  await github.rest.issues.createComment({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: prNumber,
                    body: notificationComment
                  });
                  console.log('‚úÖ Notified assignees');
                } catch (error) {
                  console.error('‚ùå Failed to notify assignees:', error.message);
                }
              }

              // Fail the workflow
              core.setFailed('PR validation failed. Check the comments for details.');
              return;
            }

            // Success case
            console.log('‚úÖ All validations passed');
            console.log(`Title: ${title}`);
            if (hasIssueRefInTitle) {
              console.log('‚úÖ Issue reference found in title');
            }
            if (hasIssueRefInBody) {
              console.log('‚úÖ Issue reference found in body');
            }

            // If PR was previously in draft due to validation failures,
            // post a success comment
            if (isDraft) {
              const validatedItems = [
                '- ‚úÖ PR title follows conventional commit format',
                '- ‚úÖ Issue reference found',
                hasIssueRefInTitle ? '- ‚úÖ Issue reference in title' : '',
                hasIssueRefInBody ? '- ‚úÖ Issue reference in body' : ''
              ].filter(Boolean);

              const successComment = `## ‚úÖ PR Validation Passed

            All validation checks have passed! This PR is ready for review.

            ### Validated:
            ${validatedItems.join('\n')}

            You can now mark this PR as ready for review.`;

              try {
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: prNumber,
                  body: successComment
                });
                console.log('‚úÖ Posted validation success comment for draft PR');
              } catch (error) {
                console.error('‚ùå Failed to post success comment:', error.message);
              }
            }
