name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  lint-and-format:
    name: Lint, Format, and Type Check
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.13'

    - name: Install dependencies
      run: |
        make install-dev

    - name: Lint and Format
      run: |
        make lint

  test:
    name: Run Tests with Coverage
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.13'

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y ffmpeg

    - name: Install dependencies
      run: |
        make install-dev

    - name: Create config file
      run: |
        cp config.yaml config.yaml || echo "Config already exists"

    - name: Run Tests with Coverage
      run: |
        make test-cov

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        fail_ci_if_error: false
        verbose: true

    - name: Upload coverage HTML report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: coverage-html-report
        path: htmlcov/
        retention-days: 30

    - name: Coverage summary
      run: |
        echo "Coverage report generated and uploaded as artifact"
        echo "See 'coverage-html-report' artifact for detailed HTML report"

  docker:
    name: Build and Test Docker Image
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      run: |
        make docker-build

    - name: Test Docker image
      run: |
        make docker-test

  security:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Run Security Scan
      run: |
        make security-scan
