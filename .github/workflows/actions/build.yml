---
name: Build

on:
  workflow_call:
    inputs:
      python-version:
        description: 'Python version to use'
        type: string
        default: '3.13'
      runs-on:
        description: 'Runner to use'
        type: string
        default: 'ubuntu-latest'
      build-python:
        description: 'Whether to build Python package'
        type: boolean
        default: true
      build-docker:
        description: 'Whether to build Docker images'
        type: boolean
        default: true
      docker-platforms:
        description: 'Docker platforms to build for'
        type: string
        default: 'linux/amd64,linux/arm64'
      docker-push:
        description: 'Whether to push Docker images'
        type: boolean
        default: false
      docker-tags:
        description: 'Docker image tags'
        type: string
        required: false
      docker-context:
        description: 'Build context'
        type: string
        default: '.'
      dockerfile:
        description: 'Path to Dockerfile'
        type: string
        default: './docker/Dockerfile'
      tag-name:
        description: 'Release tag name (for artifacts)'
        type: string
        required: false
      upload-pypi:
        description: 'Whether to upload to PyPI'
        type: boolean
        default: false
    secrets:
      docker-username:
        description: 'Docker Hub username'
        required: false
      docker-password:
        description: 'Docker Hub password/token'
        required: false
      pypi-token:
        description: 'PyPI API token'
        required: false
    outputs:
      python-artifacts:
        description: 'Python package artifacts'
        value: ${{ jobs.build-python.outputs.artifacts }}
      python-artifact-name:
        description: 'Name of the Python package artifact'
        value: ${{ jobs.build-python.outputs.artifact-name }}
      docker-tags:
        description: 'Docker image tags'
        value: ${{ jobs.build-docker.outputs.tags }}
      docker-digest:
        description: 'Docker image digest'
        value: ${{ jobs.build-docker.outputs.digest }}

jobs:
  build-python:
    name: Build Python Package
    runs-on: ${{ inputs.runs-on }}
    if: inputs.build-python
    outputs:
      artifacts: ${{ steps.build.outputs.artifacts }}
      artifact-name: python-packages-${{ inputs.tag-name || github.run_id }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ inputs.python-version }}
          cache: 'pip'

      - name: Install build dependencies
        run: |
          set -e
          python -m pip install --upgrade pip
          pip install --timeout=300 --retries=3 build twine

      - name: Build package
        id: build
        run: |
          set -e
          python -m build
          echo "artifacts=dist/*" >> "$GITHUB_OUTPUT"

      - name: Upload Python package artifacts
        id: upload
        uses: actions/upload-artifact@v4
        with:
          name: python-packages-${{ inputs.tag-name || github.run_id }}
          path: dist/
          retention-days: 90

      - name: Upload to PyPI
        if: inputs.upload-pypi
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.pypi-token }}
        run: twine upload dist/*

  build-docker:
    name: Build Docker Images
    runs-on: ${{ inputs.runs-on }}
    if: inputs.build-docker
    outputs:
      tags: ${{ steps.meta.outputs.tags }}
      digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: Checkout code
        uses: actions/checkout@${{ vars.ACTIONS_VERSIONS_CHECKOUT || 'v4' }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@${{ vars.ACTIONS_VERSIONS_SETUP_BUILDX || 'v3' }}

      - name: Log in to Docker Hub
        if: inputs.docker-push && secrets.docker-username && secrets.docker-password
        uses: docker/login-action@${{ vars.ACTIONS_VERSIONS_LOGIN_ACTION || 'v3' }}
        with:
          username: ${{ secrets.docker-username }}
          password: ${{ secrets.docker-password }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@${{ vars.ACTIONS_VERSIONS_METADATA_ACTION || 'v5' }}
        with:
          images: ${{ github.repository_owner }}/${{ github.event.repository.name }}
          tags: |
            ${{ inputs.docker-tags }}
            type=ref,event=tag
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@${{ vars.ACTIONS_VERSIONS_BUILD_PUSH_ACTION || 'v5' }}
        with:
          context: ${{ inputs.docker-context }}
          file: ${{ inputs.dockerfile }}
          platforms: ${{ inputs.docker-platforms }}
          push: ${{ inputs.docker-push }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  test-docker:
    name: Test Docker Image
    runs-on: ${{ inputs.runs-on }}
    needs: build-docker
    if: inputs.build-docker
    steps:
      - name: Checkout code
        uses: actions/checkout@${{ vars.ACTIONS_VERSIONS_CHECKOUT || 'v4' }}

      - name: Test Docker image
        run: |
          set -e
          # Basic smoke test for the Docker image
          echo "Docker image testing would go here"
          # make docker-test
