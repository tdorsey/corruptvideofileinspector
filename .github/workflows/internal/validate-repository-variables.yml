name: Validate Repository Variables (Internal)

on:
  workflow_call:
    inputs:
      trigger_context:
        description: 'Context that triggered this validation'
        required: false
        type: string
        default: 'workflow_call'
      enable_workflow_reporting:
        description: 'Generate detailed workflow analysis report'
        required: false
        type: boolean
        default: false

permissions:
  contents: read

jobs:
  check-variables:
    name: Check Repository Variables
    runs-on: ubuntu-latest
    outputs:
      validation_result: ${{ steps.validate.outputs.validation_result }}
      missing_count: ${{ steps.validate.outputs.missing_count }}
      valid_count: ${{ steps.validate.outputs.valid_count }}
      missing_variables: ${{ steps.validate.outputs.missing_variables }}
      valid_variables: ${{ steps.validate.outputs.valid_variables }}

    steps:
      - name: Validate Repository Variables
        id: validate
        uses: actions/github-script@v7
        with:
          script: |
            // Define all required repository variables for action versions
            // Based on analysis of existing workflow files
            const requiredVariables = [
              // Core GitHub Actions (used across multiple workflows)
              {
                name: 'ACTIONS_VERSIONS_CHECKOUT',
                description: 'actions/checkout version',
                currentUsage: 'v4',
                usedIn: ['ci.yml', 'release.yml', 'auto-create-branch.yml', 'labeler.yml', 'copilot-setup-steps.yml']
              },
              {
                name: 'ACTIONS_VERSIONS_SETUP_PYTHON',
                description: 'actions/setup-python version',
                currentUsage: 'v5',
                usedIn: ['ci.yml', 'release.yml', 'copilot-setup-steps.yml']
              },
              {
                name: 'ACTIONS_VERSIONS_GITHUB_SCRIPT',
                description: 'actions/github-script version',
                currentUsage: 'v7',
                usedIn: ['auto-create-branch.yml', 'pr-title-check.yml']
              },

              // Docker Actions (used in release workflow)
              {
                name: 'ACTIONS_VERSIONS_SETUP_BUILDX',
                description: 'docker/setup-buildx-action version',
                currentUsage: 'v3',
                usedIn: ['ci.yml', 'release.yml']
              },
              {
                name: 'ACTIONS_VERSIONS_LOGIN_ACTION',
                description: 'docker/login-action version',
                currentUsage: 'v3',
                usedIn: ['release.yml']
              },
              {
                name: 'ACTIONS_VERSIONS_METADATA_ACTION',
                description: 'docker/metadata-action version',
                currentUsage: 'v5',
                usedIn: ['release.yml']
              },
              {
                name: 'ACTIONS_VERSIONS_BUILD_PUSH_ACTION',
                description: 'docker/build-push-action version',
                currentUsage: 'v5',
                usedIn: ['release.yml']
              },
              {
                name: 'ACTIONS_DOCKER_BUILD_PLATFORMS',
                description: 'Docker build platforms',
                currentUsage: 'linux/amd64,linux/arm64',
                usedIn: ['docker-build.yml', 'release.yml']
              },
              {
                name: 'PYTHON_VERSION',
                description: 'Python version for builds',
                currentUsage: '3.13',
                usedIn: ['docker-build.yml', 'release.yml']
              },
              {
                name: 'ACTIONS_VERSIONS_SEMANTIC_PULL_REQUEST',
                description: 'amannn/action-semantic-pull-request version',
                currentUsage: 'v5',
                usedIn: ['pr-title-check.yml']
              },
              {
                name: 'ACTIONS_VERSIONS_AUTO_ASSIGN_ISSUE',
                description: 'pozil/auto-assign-issue version',
                currentUsage: 'v2.2.0',
                usedIn: ['auto-assign-issue.yml']
              },
              {
                name: 'ACTIONS_VERSIONS_ISSUE_LABELER',
                description: 'github/issue-labeler version',
                currentUsage: 'v3.4',
                usedIn: ['labeler.yml']
              }
            ];

            core.startGroup('🔍 Validating Repository Variables');
            core.info(`📋 Trigger context: ${{ inputs.trigger_context }}`);
            core.info(`📊 Total variables to validate: ${requiredVariables.length}`);

            let missingVariables = [];
            let validVariables = [];

            // Check each required variable
            for (const varInfo of requiredVariables) {
              const varName = varInfo.name;

              try {
                // Try to access the variable through the environment
                const varValue = process.env[`VARS_${varName}`] || '';

                if (!varValue || varValue.trim() === '') {
                  missingVariables.push(varInfo);
                  core.error(`Missing: ${varName}`);
                } else {
                  const validVar = { ...varInfo, actualValue: varValue };
                  validVariables.push(validVar);
                  core.info(`✅ Found: ${varName} = ${varValue}`);
                }
              } catch (error) {
                missingVariables.push(varInfo);
                core.error(`Error accessing ${varName}: ${error.message}`);
              }
            }

            core.endGroup();

            // Display results summary
            core.startGroup('📊 Validation Summary');
            core.info(`✅ Valid variables: ${validVariables.length}`);
            core.info(`❌ Missing variables: ${missingVariables.length}`);
            core.endGroup();

            // Determine validation result
            const validationResult = missingVariables.length === 0 ? 'success' : 'failure';

            // Set outputs for the reporting job
            core.setOutput('validation_result', validationResult);
            core.setOutput('missing_count', missingVariables.length);
            core.setOutput('valid_count', validVariables.length);
            core.setOutput('missing_variables', JSON.stringify(missingVariables));
            core.setOutput('valid_variables', JSON.stringify(validVariables));

            // Log the basic result for this job
            if (validationResult === 'success') {
              core.info('🎉 All repository variables are properly configured!');
            } else {
              core.error(`Validation failed: ${missingVariables.length} variables are missing.`);
            }

        env:
          # Map all repository variables to environment variables
          # Core GitHub Actions
          VARS_ACTIONS_VERSIONS_CHECKOUT: ${{ vars.ACTIONS_VERSIONS_CHECKOUT }}
          VARS_ACTIONS_VERSIONS_SETUP_PYTHON: ${{ vars.ACTIONS_VERSIONS_SETUP_PYTHON }}
          VARS_ACTIONS_VERSIONS_GITHUB_SCRIPT: ${{ vars.ACTIONS_VERSIONS_GITHUB_SCRIPT }}

          # Docker Actions
          VARS_ACTIONS_VERSIONS_SETUP_BUILDX: ${{ vars.ACTIONS_VERSIONS_SETUP_BUILDX }}
          VARS_ACTIONS_VERSIONS_LOGIN_ACTION: ${{ vars.ACTIONS_VERSIONS_LOGIN_ACTION }}
          VARS_ACTIONS_VERSIONS_METADATA_ACTION: ${{ vars.ACTIONS_VERSIONS_METADATA_ACTION }}
          VARS_ACTIONS_VERSIONS_BUILD_PUSH_ACTION: ${{ vars.ACTIONS_VERSIONS_BUILD_PUSH_ACTION }}

          # Additional Actions
          VARS_ACTIONS_VERSIONS_SEMANTIC_PULL_REQUEST: ${{ vars.ACTIONS_VERSIONS_SEMANTIC_PULL_REQUEST }}
          VARS_ACTIONS_VERSIONS_AUTO_ASSIGN_ISSUE: ${{ vars.ACTIONS_VERSIONS_AUTO_ASSIGN_ISSUE }}
          VARS_ACTIONS_VERSIONS_ISSUE_LABELER: ${{ vars.ACTIONS_VERSIONS_ISSUE_LABELER }}

          # Build Configuration
          VARS_ACTIONS_DOCKER_BUILD_PLATFORMS: ${{ vars.ACTIONS_DOCKER_BUILD_PLATFORMS }}
          VARS_PYTHON_VERSION: ${{ vars.PYTHON_VERSION }}

  generate-report:
    name: Generate Validation Report
    needs: check-variables
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Generate Variables Summary Report
        uses: actions/github-script@v7
        with:
          script: |
            const validationResult = '${{ needs.check-variables.outputs.validation_result }}';
            const missingCount = parseInt('${{ needs.check-variables.outputs.missing_count }}');
            const validCount = parseInt('${{ needs.check-variables.outputs.valid_count }}');

            const missingVariables = JSON.parse('${{ needs.check-variables.outputs.missing_variables }}');
            const validVariables = JSON.parse('${{ needs.check-variables.outputs.valid_variables }}');

            core.startGroup('📋 Variables Report Generation');
            core.info(`Validation Result: ${validationResult}`);
            core.info(`Processing ${validCount} valid, ${missingCount} missing variables`);
            core.endGroup();

            // Create detailed job summary focused on variables
            let summaryContent = [];

            if (validationResult === 'success') {
              // Success case
              summaryContent.push('## ✅ Repository Variables Validation Passed');
              summaryContent.push('');
              summaryContent.push(`All **${validCount}** required repository variables are properly configured.`);
              summaryContent.push('');

              if (validVariables.length > 0) {
                summaryContent.push('### ✅ Valid Variables:');
                summaryContent.push('');
                summaryContent.push('| Variable | Value | Description | Workflows |');
                summaryContent.push('|----------|-------|-------------|-----------|');

                validVariables.forEach(varInfo => {
                  const workflowCount = varInfo.usedIn.length;
                  summaryContent.push(`| \`${varInfo.name}\` | \`${varInfo.actualValue}\` | ${varInfo.description} | ${workflowCount} workflows |`);
                });
                summaryContent.push('');
              }

            } else {
              // Failure case
              summaryContent.push('## ❌ Repository Variables Validation Failed');
              summaryContent.push('');
              summaryContent.push(`**${missingCount}** required repository variables are missing.`);
              summaryContent.push('');

              summaryContent.push('### ❌ Missing Variables:');
              summaryContent.push('');
              summaryContent.push('| Variable | Recommended Value | Description | Workflow Count |');
              summaryContent.push('|----------|-------------------|-------------|----------------|');

              missingVariables.forEach(varInfo => {
                const workflowCount = varInfo.usedIn.length;
                summaryContent.push(`| \`${varInfo.name}\` | \`${varInfo.currentUsage}\` | ${varInfo.description} | ${workflowCount} workflows |`);
              });
              summaryContent.push('');

              // Add fix instructions
              summaryContent.push('## 🔧 How to Fix');
              summaryContent.push('');
              summaryContent.push('1. **Go to Repository Settings** → **Secrets and variables** → **Actions** → **Variables tab**');
              summaryContent.push('');
              summaryContent.push('2. **Add the missing variables** with these recommended values:');
              summaryContent.push('');

              missingVariables.forEach(varInfo => {
                summaryContent.push(`   - **\`${varInfo.name}\`**: \`${varInfo.currentUsage}\``);
              });
              summaryContent.push('');

              summaryContent.push('3. **Re-run this workflow** to validate the changes');
              summaryContent.push('');

              if (validVariables.length > 0) {
                summaryContent.push('### ✅ Already Configured:');
                summaryContent.push('');
                validVariables.forEach(varInfo => {
                  summaryContent.push(`- \`${varInfo.name}\`: \`${varInfo.actualValue}\``);
                });
                summaryContent.push('');
              }
            }

            // Add context and metadata
            summaryContent.push(`## 🤖 Validation Context: \`${{ inputs.trigger_context }}\``);
            summaryContent.push('');
            summaryContent.push('### 📊 Summary Statistics:');
            summaryContent.push('');
            summaryContent.push(`- ✅ **Valid Variables**: ${validCount}`);
            summaryContent.push(`- ❌ **Missing Variables**: ${missingCount}`);
            summaryContent.push(`- 📋 **Total Expected**: ${validCount + missingCount}`);
            summaryContent.push('');

            if (!${{ inputs.enable_workflow_reporting }}) {
              summaryContent.push('> **Note:** Detailed workflow analysis is disabled. Enable with `enable_workflow_reporting: true` for comprehensive workflow-variable mapping.');
              summaryContent.push('');
            }

            summaryContent.push('---');
            summaryContent.push('*Repository Variables Validation Report - Variables focused view*');

            // Write the summary
            const fullSummary = summaryContent.join('\n');
            await core.summary.addRaw(fullSummary).write();

            core.info('📄 Variables summary report generated successfully');

  workflow-analysis:
    name: Generate Workflow Analysis Report
    needs: check-variables
    runs-on: ubuntu-latest
    if: always() && inputs.enable_workflow_reporting == true

    steps:
      - name: Generate Workflow-Variables Mapping Report
        uses: actions/github-script@v7
        with:
          script: |
            const validationResult = '${{ needs.check-variables.outputs.validation_result }}';
            const missingVariables = JSON.parse('${{ needs.check-variables.outputs.missing_variables }}');
            const validVariables = JSON.parse('${{ needs.check-variables.outputs.valid_variables }}');

            core.startGroup('🔄 Workflow Analysis Report Generation');
            core.info('Generating detailed workflow-variable mapping analysis');
            core.endGroup();

            // Combine all variables for analysis
            const allVariables = [...missingVariables, ...validVariables];

            // Create workflow-centric analysis
            const workflowMap = {};

            // Build workflow mapping
            allVariables.forEach(varInfo => {
              varInfo.usedIn.forEach(workflow => {
                if (!workflowMap[workflow]) {
                  workflowMap[workflow] = {
                    name: workflow,
                    variables: [],
                    missingCount: 0,
                    validCount: 0
                  };
                }

                const status = missingVariables.includes(varInfo) ? 'missing' : 'valid';

                workflowMap[workflow].variables.push({
                  ...varInfo,
                  status: status
                });

                if (status === 'missing') {
                  workflowMap[workflow].missingCount++;
                } else {
                  workflowMap[workflow].validCount++;
                }
              });
            });

            // Create workflow analysis summary
            let summaryContent = [];

            summaryContent.push('## 🔄 Workflow Analysis Report');
            summaryContent.push('');
            summaryContent.push('This report shows how repository variables are used across workflow files.');
            summaryContent.push('');

            const workflows = Object.values(workflowMap).sort((a, b) => a.name.localeCompare(b.name));

            // Summary table
            summaryContent.push('### 📊 Workflows Overview:');
            summaryContent.push('');
            summaryContent.push('| Workflow File | Total Variables | ✅ Valid | ❌ Missing | Status |');
            summaryContent.push('|---------------|-----------------|----------|------------|--------|');

            workflows.forEach(workflow => {
              const totalVars = workflow.variables.length;
              const status = workflow.missingCount === 0 ? '✅ Ready' : `❌ ${workflow.missingCount} missing`;

              summaryContent.push(`| \`.github/workflows/${workflow.name}\` | ${totalVars} | ${workflow.validCount} | ${workflow.missingCount} | ${status} |`);
            });
            summaryContent.push('');

            // Detailed per-workflow analysis
            summaryContent.push('### 📋 Detailed Workflow Analysis:');
            summaryContent.push('');

            workflows.forEach(workflow => {
              summaryContent.push(`#### \`.github/workflows/${workflow.name}\``);
              summaryContent.push('');

              if (workflow.missingCount === 0) {
                summaryContent.push('> ✅ **Status**: All variables configured');
              } else {
                summaryContent.push(`> ❌ **Status**: ${workflow.missingCount} missing variables - workflow may fail`);
              }
              summaryContent.push('');

              summaryContent.push('| Variable | Status | Current/Expected Value | Description |');
              summaryContent.push('|----------|--------|------------------------|-------------|');

              // Sort variables by status (missing first, then valid)
              const sortedVars = workflow.variables.sort((a, b) => {
                if (a.status !== b.status) {
                  return a.status === 'missing' ? -1 : 1;
                }
                return a.name.localeCompare(b.name);
              });

              sortedVars.forEach(varInfo => {
                let statusIcon, value, description;

                if (varInfo.status === 'missing') {
                  statusIcon = '❌ Missing';
                  value = varInfo.currentUsage;
                  description = varInfo.description;
                } else {
                  statusIcon = '✅ Valid';
                  value = varInfo.actualValue;
                  description = varInfo.description;
                }

                summaryContent.push(`| \`${varInfo.name}\` | ${statusIcon} | \`${value}\` | ${description} |`);
              });

              summaryContent.push('');
            });

            // Impact analysis
            const criticalWorkflows = workflows.filter(w => w.missingCount > 0);
            if (criticalWorkflows.length > 0) {
              summaryContent.push('### ⚠️ Impact Analysis:');
              summaryContent.push('');
              summaryContent.push(`**${criticalWorkflows.length}** workflow(s) have missing variables and may fail:`);
              summaryContent.push('');

              criticalWorkflows.forEach(workflow => {
                summaryContent.push(`- **\`.github/workflows/${workflow.name}\`**: ${workflow.missingCount} missing variable(s)`);
                workflow.variables.filter(v => v.status === 'missing').forEach(v => {
                  summaryContent.push(`  - \`${v.name}\` (expected: \`${v.currentUsage}\`)`);
                });
              });
              summaryContent.push('');
            }

            // Recommendations
            summaryContent.push('### 💡 Recommendations:');
            summaryContent.push('');

            if (criticalWorkflows.length === 0) {
              summaryContent.push('- ✅ All workflows have their required variables configured');
            } else {
              summaryContent.push('1. **Priority**: Configure missing variables for critical workflows first');
              summaryContent.push('2. **Testing**: Test affected workflows after adding variables');
              summaryContent.push('3. **Monitoring**: Set up notifications for workflow failures');
            }

            summaryContent.push('');
            summaryContent.push('---');
            summaryContent.push(`*Workflow Analysis Report - Generated for context: \`${{ inputs.trigger_context }}\`*`);

            // Write the workflow analysis summary
            const fullSummary = summaryContent.join('\n');
            await core.summary.addRaw(fullSummary).write();

            core.info('🔄 Workflow analysis report generated successfully');

      - name: Final Validation Result
        uses: actions/github-script@v7
        with:
          script: |
            const validationResult = '${{ needs.check-variables.outputs.validation_result }}';
            const missingCount = parseInt('${{ needs.check-variables.outputs.missing_count }}');
            const validCount = parseInt('${{ needs.check-variables.outputs.valid_count }}');

            if (validationResult === 'failure') {
              const missingVariables = JSON.parse('${{ needs.check-variables.outputs.missing_variables }}');
              const missingNames = missingVariables.map(v => v.name).join(', ');

              const errorMessage = `Repository variables validation failed. ${missingCount} required variables are missing: ${missingNames}`;
              core.setFailed(errorMessage);
            } else {
              core.info('🎉 Repository variables validation completed successfully!');
              core.info(`✅ Summary: ${validCount} valid variables, ${missingCount} missing`);
            }
