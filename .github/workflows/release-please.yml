name: Release Please

on:
  push:
    branches: [ main ]

permissions:
  contents: write
  pull-requests: write

jobs:
  release-please:
    name: Release Please
    runs-on: ubuntu-latest
    
    steps:
    - name: Release Please
      uses: googleapis/release-please-action@v4
      id: release
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        config-file: release-please-config.json
        manifest-file: .release-please-manifest.json
        
    # Build and release only if a release was created
    - name: Checkout code
      if: steps.release.outputs.release_created
      uses: actions/checkout@v4
      
    - name: Set up Python
      if: steps.release.outputs.release_created
      uses: actions/setup-python@v5
      with:
        python-version: '3.13'

    - name: Install build dependencies
      if: steps.release.outputs.release_created
      run: |
        python -m pip install --upgrade pip
        pip install --timeout=300 --retries=3 build twine

    - name: Build package
      if: steps.release.outputs.release_created
      run: |
        python -m build

    - name: Set up Docker Buildx
      if: steps.release.outputs.release_created
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      if: steps.release.outputs.release_created
      uses: docker/login-action@v3
      with:
        username: ${{ vars.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Extract metadata
      if: steps.release.outputs.release_created
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: tdorsey/corrupt-video-inspector
        tags: |
          type=semver,pattern={{version}},value=${{ steps.release.outputs.tag_name }}
          type=semver,pattern={{major}}.{{minor}},value=${{ steps.release.outputs.tag_name }}

    - name: Build and push Docker image
      if: steps.release.outputs.release_created
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        platforms: linux/amd64,linux/arm64

    - name: Upload Python package to PyPI
      if: steps.release.outputs.release_created
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        twine upload dist/*