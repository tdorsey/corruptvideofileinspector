name: "Copilot Setup Steps"

# Automatically run the setup steps when they are changed to allow for easy validation, and
# allow manual testing through the repository's "Actions" tab
on:
  workflow_dispatch:
  push:
    paths:
      - .github/workflows/copilot-setup-steps.yml
  pull_request:
    paths:
      - .github/workflows/copilot-setup-steps.yml

jobs:
  # The job MUST be called `copilot-setup-steps` or it will not be picked up by Copilot.
  copilot-setup-steps:
    runs-on: ubuntu-latest

    # Set the permissions to the lowest permissions possible needed for your steps.
    # Copilot will be given its own token for its operations.
    permissions:
      # If you want to clone the repository as part of your setup steps, for example to install dependencies, you'll need the `contents: read` permission. If you don't clone the repository in your setup steps, Copilot will do this for you automatically after the steps complete.
      contents: read

    # You can define any steps you want, and they will run before the agent starts.
    # If you do not check out your code, Copilot will do this for you.
    steps:
      - uses: actions/checkout@v4

      - name: Cache APT packages
        id: cache-apt
        uses: actions/cache@v4
        with:
          path: /var/cache/apt/archives
          key: ${{ runner.os }}-apt-ffmpeg
          restore-keys: |
            ${{ runner.os }}-apt-

      - name: Install system dependencies
        if: steps.cache-apt.outputs.cache-hit == 'false'
        run:           sudo apt-get install -y ffmpeg

      - name: Install poetry
        run: pipx install poetry

      - id: setup-python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ vars.PYTHON_VERSION }}
          cache: 'poetry'

      - name: Install dependencies (Poetry)
        if: steps.setup-python.outputs.cache-hit == 'false'
        run: poetry install

  #    - name: Install pre-commit hooks
  #      run: make pre-commit-install

   #   - name: Verify tools are available
   #     run: |
   #       black --version
   #       ruff --version
   #       mypy --version
   #       pytest --version
