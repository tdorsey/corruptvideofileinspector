name: 🏷️ Issue Form Auto-Labeler

on:
  issues:
    types: [opened, edited]

permissions:
  issues: write
  contents: read

jobs:
  auto-label-issue-form:
    if: github.event.issue.state == 'open'
    runs-on: ubuntu-latest
    steps:
      - name: Auto-label based on issue form
        uses: actions/github-script@v7
        with:
          script: |
            const issue = context.payload.issue;
            const issueBody = issue.body || '';
            
            // Extract form data using regex patterns
            const extractFormValue = (fieldName) => {
              const regex = new RegExp(`### ${fieldName}[\\s\\S]*?\\n\\n([^\\n#]+)`, 'i');
              const match = issueBody.match(regex);
              return match ? match[1].trim() : null;
            };
            
            const stakeholder = extractFormValue('Stakeholder Type');
            const component = extractFormValue('Component/Domain');
            
            const labelsToAdd = new Set();
            
            // Map stakeholder types to labels
            if (stakeholder) {
              switch (stakeholder) {
                case 'Project Maintainer':
                  labelsToAdd.add('stakeholder:maintainer');
                  break;
                case 'Contributor':
                  labelsToAdd.add('stakeholder:contributor');
                  break;
                case 'End User':
                  labelsToAdd.add('stakeholder:user');
                  break;
              }
            }
            
            // Map component/domain to labels
            if (component) {
              switch (component) {
                case 'CLI':
                  labelsToAdd.add('component:cli');
                  break;
                case 'Scanner':
                  labelsToAdd.add('component:scanner');
                  break;
                case 'Trakt Integration':
                  labelsToAdd.add('component:trakt');
                  break;
                case 'Config':
                  labelsToAdd.add('component:config');
                  break;
                case 'Reporter':
                  labelsToAdd.add('component:reporter');
                  break;
                case 'Output':
                  labelsToAdd.add('component:output');
                  break;
                case 'Docker':
                  labelsToAdd.add('component:docker');
                  break;
                case 'CI/CD':
                  labelsToAdd.add('component:cicd');
                  break;
                case 'GitHub Actions':
                  labelsToAdd.add('component:github-actions');
                  break;
                case 'Tests':
                  labelsToAdd.add('component:tests');
                  break;
                case 'Documentation':
                  labelsToAdd.add('component:docs');
                  break;
                case 'Other':
                  labelsToAdd.add('component:other');
                  break;
              }
            }
            
            // Get current labels
            const currentLabels = issue.labels.map(label => label.name);
            
            // Filter out labels that already exist
            const newLabels = Array.from(labelsToAdd).filter(label => !currentLabels.includes(label));
            
            if (newLabels.length > 0) {
              console.log(`Adding labels: ${newLabels.join(', ')}`);
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                labels: newLabels
              });
            } else {
              console.log('No new labels to add');
            }